---
import { Image } from 'astro:assets';
import CallToAction from '@astrojs/starlight/components/CallToAction.astro';
import { ImageMetadata } from 'astro';

const PAGE_TITLE_ID = '_top';

const { data } = Astro.props.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
	loading: 'eager' as const,
	decoding: 'async' as const,
	width: 400,
	height: 400,
	alt: image?.alt || '',
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
	if ('file' in image) {
		darkImage = image.file;
	} else if ('dark' in image) {
		darkImage = image.dark;
		lightImage = image.light;
	} else {
		rawHtml = image.html;
	}
}
---

<div class="hero">
	{
		darkImage && (
			<Image
				src={darkImage}
				{...imageAttrs}
				class:list={{ 'light:sl-hidden': Boolean(lightImage) }}
			/>
		)
	}
	{lightImage && <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden" />}
	{rawHtml && <div class="hero-html sl-flex" set:html={rawHtml} />}
	<div class="sl-flex stack">
		<div class="sl-flex copy">
			<h1 id={PAGE_TITLE_ID} data-page-title set:html={title} />
			{tagline && <div class="tagline" set:html={tagline} />}
		</div>
		{
			actions.length > 0 && (
				<div class="sl-flex actions">
					{actions.map(({ text, ...attrs }) => (
						<CallToAction {...attrs} set:html={text} />
					))}
				</div>
			)
		}
	</div>
</div>

<style>
    .hero {
        display: grid;
        align-items: center;
        gap: 1rem;
        padding-bottom: 1rem;
    }

    .hero > img,
    .hero > .hero-html {
        object-fit: contain;
        width: min(50%, 15rem);
        height: auto;
        margin-inline: auto;
    }

    .stack {
        flex-direction: column;
        gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
        text-align: center;
    }

    .copy {
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }

    .copy > * {
        max-width: 50ch;
    }

    h1 {
        font-size: var(--sl-text-6xl);
        line-height: var(--sl-line-height-headings);
        font-weight: 600;
        color: var(--sl-color-white);
    }

    .tagline {
        font-size: var(--sl-text-4xl);
				line-height: var(--sl-line-height-headings);
        color: var(--sl-color-gray-2);
    }

    .actions {
        gap: 1rem 2rem;
        flex-wrap: wrap;
        justify-content: center;
    }

		.actions > :global(.action.primary) {
        background: var(--sheepdog-primary);
				text-transform: uppercase;
				font-weight: 700;
				border-radius: 1.25rem;
		}

    :global([data-theme='dark']) .actions > :global(.action.primary) {
        --sl-color-black: var(--sl-color-white);
		}

    @media (min-width: 50rem) {
        h1 {
            font-size: 100px;
        }

        .hero {
            grid-template-columns: 7fr 4fr;
            gap: 3%;
            padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
        }

        .hero > img,
        .hero > .hero-html {
            //order: 2;
            width: min(100%, 15rem);
        }

        .stack {
            text-align: start;
        }

        .copy {
            align-items: flex-start;
        }

        .actions {
            justify-content: flex-start;
        }
    }

    .hero {
        grid-template-columns: 1fr;
        place-items: center;

        & :where(.copy, .actions) {
            justify-content: center;
            align-items: center;
        }
    }
</style>
